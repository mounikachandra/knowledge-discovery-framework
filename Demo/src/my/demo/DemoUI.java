/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.demo;

import edu.stanford.nlp.classify.Classifier;
import edu.stanford.nlp.classify.ColumnDataClassifier;
import edu.stanford.nlp.ling.Datum;
import edu.stanford.nlp.objectbank.ObjectBank;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;
import java.util.Arrays;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
//import static my.demo.Demo.count;
//import static my.demo.Demo.position;

/**
 *
 * @author alok102856
 */
public class DemoUI extends javax.swing.JFrame {

    /**
     * Creates new form DemoUI
     */
    String[] myclass = new String[1000];
    int myclassCount = 0;

    public DemoUI() {
        initComponents();

        propLbl.setText(Variables.filePathProp);
        trainLbl.setText(Variables.filePathTrain);
        bratLbl.setText(Variables.bratPath);
        txtLbl.setText(Variables.filePathTxt);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        jPanel1 = new javax.swing.JPanel();
        label2 = new java.awt.Label();
        browseBtn = new javax.swing.JButton();
        ClassifyPanel = new javax.swing.JPanel();
        label3 = new java.awt.Label();
        browseBtn1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        label4 = new java.awt.Label();
        browseBtn2 = new javax.swing.JButton();
        label5 = new java.awt.Label();
        browseBtn3 = new javax.swing.JButton();
        propLbl = new java.awt.Label();
        trainLbl = new java.awt.Label();
        bratLbl = new java.awt.Label();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        myLog = new javax.swing.JTextArea();
        txtLbl = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        label1.setText("DEMO");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setAutoscrolls(true);

        label2.setText("Enter a Random Abstract(txt format)");

        browseBtn.setText("Browse");
        browseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnActionPerformed(evt);
            }
        });

        ClassifyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Classification Details"));
        ClassifyPanel.setAutoscrolls(true);

        label3.setText("Training File");

        browseBtn1.setText("Browse");
        browseBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtn1ActionPerformed(evt);
            }
        });

        jButton1.setText("RUN");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        label4.setText("Properties File");

        browseBtn2.setText("Browse");
        browseBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtn2ActionPerformed(evt);
            }
        });

        label5.setText("Brat Folder");

        browseBtn3.setText("Browse");
        browseBtn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtn3ActionPerformed(evt);
            }
        });

        propLbl.setBackground(new java.awt.Color(166, 213, 216));

        trainLbl.setBackground(new java.awt.Color(166, 213, 216));
        trainLbl.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        bratLbl.setBackground(new java.awt.Color(166, 213, 216));

        jButton2.setText("IDENTIFY");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("VISUALISE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ClassifyPanelLayout = new javax.swing.GroupLayout(ClassifyPanel);
        ClassifyPanel.setLayout(ClassifyPanelLayout);
        ClassifyPanelLayout.setHorizontalGroup(
            ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClassifyPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClassifyPanelLayout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ClassifyPanelLayout.createSequentialGroup()
                        .addGroup(ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bratLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(trainLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(propLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ClassifyPanelLayout.createSequentialGroup()
                        .addGroup(ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(ClassifyPanelLayout.createSequentialGroup()
                                .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(browseBtn3))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ClassifyPanelLayout.createSequentialGroup()
                                .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                                .addComponent(browseBtn2))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ClassifyPanelLayout.createSequentialGroup()
                                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(browseBtn1)))
                        .addGap(153, 153, 153))))
        );
        ClassifyPanelLayout.setVerticalGroup(
            ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClassifyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(browseBtn1)
                    .addComponent(label3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trainLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseBtn2))
                .addGap(22, 22, 22)
                .addComponent(propLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClassifyPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ClassifyPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseBtn3)))
                .addGap(21, 21, 21)
                .addComponent(bratLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)))
        );

        label3.getAccessibleContext().setAccessibleName("");

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));
        jScrollPane2.setAutoscrolls(true);

        myLog.setColumns(20);
        myLog.setRows(5);
        jScrollPane2.setViewportView(myLog);

        txtLbl.setBackground(new java.awt.Color(166, 213, 216));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseBtn))
                    .addComponent(ClassifyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(browseBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ClassifyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        label1.getAccessibleContext().setAccessibleName("Demo");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseBtn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtn3ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();

        // For Directory
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        // For File
        //fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);

        int rVal = fileChooser.showOpenDialog(null);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            Variables.bratPath = fileChooser.getSelectedFile().toString() + "/";
            logIt("Setting Brat Directory to :" + Variables.bratPath);
            bratLbl.setText(Variables.bratPath);
        }
    }//GEN-LAST:event_browseBtn3ActionPerformed

    private void browseBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtn2ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();

        // For Directory
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        // For File
        //fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PROPERTIES FILES", "prop");
        fileChooser.setFileFilter(filter);

        int rVal = fileChooser.showOpenDialog(null);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            Variables.filePathProp = fileChooser.getSelectedFile().toString();
            logIt("Properties File Selected:" + Variables.filePathProp);
            propLbl.setText(Variables.filePathProp);
        }
    }//GEN-LAST:event_browseBtn2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        //check if input is set
        if (Variables.bratPath == null || Variables.fileName == null || Variables.filePathProp == null || Variables.filePathTrain == null || Variables.filePathTxt == null) {
            JOptionPane.showMessageDialog(null, "ERROR!!!");
        } else {
            runMyClassifier();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void browseBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtn1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();

        // For Directory
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        // For File
        //fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TRAIN FILES", "train");
        fileChooser.setFileFilter(filter);

        int rVal = fileChooser.showOpenDialog(null);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            Variables.filePathTrain = fileChooser.getSelectedFile().toString();
            logIt("Train File Selected:" + Variables.filePathTrain);
            trainLbl.setText(Variables.filePathTrain);
        }
    }//GEN-LAST:event_browseBtn1ActionPerformed

    private void browseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        fileChooser.setFileFilter(filter);

        int rVal = fileChooser.showOpenDialog(null);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            Variables.filePathTxt = fileChooser.getSelectedFile().toString();
            logIt("Text File Selected:" + Variables.filePathTxt);
            Variables.fileName = fileChooser.getSelectedFile().getName();
            Variables.fileName = Variables.fileName.substring(0, Variables.fileName.indexOf(".txt"));
            logIt("Identified file name=" + Variables.fileName);
            txtLbl.setText(Variables.filePathTxt);
        }

    }//GEN-LAST:event_browseBtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        makeTestFile();
        step2Classify();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton3ActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DemoUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DemoUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DemoUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DemoUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DemoUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ClassifyPanel;
    private java.awt.Label bratLbl;
    private javax.swing.JButton browseBtn;
    private javax.swing.JButton browseBtn1;
    private javax.swing.JButton browseBtn2;
    private javax.swing.JButton browseBtn3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private javax.swing.JTextArea myLog;
    private java.awt.Label propLbl;
    private java.awt.Label trainLbl;
    private java.awt.Label txtLbl;
    // End of variables declaration//GEN-END:variables

    public void logIt(String s) {

        myLog.setText(myLog.getText() + "\n" + s);
    }

    private void runMyClassifier() {
        try {
            int count = 1;
            int position = 0;
            // ACOMMENT
            Scanner sc2 = null;
            Scanner sc3 = null;
            // DemoUI dobj = new DemoUI();
            try {
                sc2 = new Scanner(new File(Variables.filePathTxt));
                logIt("Reading The abstract...");
                // to get start and end indices

            } catch (FileNotFoundException e1) {
                // TODO Auto-generated catch block!!
                JOptionPane.showMessageDialog(null, "ERROR!!!File Not Found!!");
                e1.printStackTrace();
            }

            File file = new File(Variables.bratPath + Variables.fileName + ".test");

            logIt("Processing The abstract...");
            // file.createNewFile();

            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);

            while (sc2.hasNext()) {
                String s = sc2.next();
                bw.write("-" + "\t" + s + "\n");
            }

            bw.close();

            file = new File(Variables.bratPath + Variables.fileName + ".ann");
            logIt("Running the Classifier...");

            fw = new FileWriter(file.getAbsoluteFile());
            bw = new BufferedWriter(fw);

            ColumnDataClassifier cdc = new ColumnDataClassifier(Variables.filePathProp);
            Classifier<String, String> cl = cdc.makeClassifier(cdc
                    .readTrainingExamples(Variables.filePathTrain));
            for (String line : ObjectBank.getLineIterator(Variables.bratPath + Variables.fileName
                    + ".test", "utf-8")) {
                // instead of the method in the line below, if you have the
                // individual elements
                // already you can use cdc.makeDatumFromStrings(String[])
                Datum<String, String> d = cdc.makeDatumFromLine(line);
                System.out.println(line + "  ==>  " + cl.classOf(d) + "--");
                //myclass = "";
                if (!cl.classOf(d).equals("Others")) {
                    if (cl.classOf(d).equals("gene")) {
                        myclass[myclassCount] = "Gene-Level";
                    } else if (cl.classOf(d).equals("protein")) {
                        myclass[myclassCount] = "Protein-Level";
                    }

                    logIt("Creating Annotations for Brat...");
                    bw.write("T"
                            + (count++)
                            + "\t"
                            + myclass[myclassCount++]
                            + " "
                            + position
                            + " "
                            + (position + line
                            .substring(line.indexOf("\t") + 1).length())
                            + "\t" + line.substring(line.indexOf("\t") + 1)
                            + "\n");

                }
                position += (line.substring(line.indexOf("\t") + 1).length() + 1);

            }
            
            bw.close();

            //Copying .txt file to brat folder
            File source = new File(Variables.filePathTxt);
            File dest = new File(Variables.bratPath + Variables.fileName + ".txt");

            //copy file conventional way using Stream
            long start = System.nanoTime();
            copyFileUsingStream(source, dest);

            logIt("Opening Browser...");
            Desktop d = Desktop.getDesktop();
            d.browse(new URI("http://127.0.0.1:8001/index.xhtml#/Internship/" + Variables.fileName));

        } catch (Exception e) {
            e.printStackTrace();

        }

    }

    private static void copyFileUsingStream(File source, File dest) throws IOException {
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(source);
            os = new FileOutputStream(dest);
            byte[] buffer = new byte[1024];
            int length;
            while ((length = is.read(buffer)) > 0) {
                os.write(buffer, 0, length);
            }
        } finally {
            is.close();
            os.close();
        }
    }

    private void step2Classify() {

        double[][] leukemia = new double[1000][3];
        double[][] glioma = new double[1000][3];
        double[][] breastCancer = new double[1000][3];
        double[][] pancreaticCancer = new double[1000][3];

        //int   leukemiaCount=0,gliomaCount=0,breastCancerCount=0,pancreaticCancerCount=0,myclassCount=0;
        int i = -1;

               try {
 
			
 
			File file = new File("/home/rahul102855/Desktop/brat-v1.3_Crunchy_Frog/data/Internship/trial.txt");
 
			// if file doesnt exists, then create it
			if (!file.exists()) {
				file.createNewFile();
			}
 
			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			
	
           // logIt("Processing The abstract...");
            // file.createNewFile();

        
        ColumnDataClassifier cdc = new ColumnDataClassifier(Variables.filePathProp2);
        Classifier<String, String> cl
                = cdc.makeClassifier(cdc.readTrainingExamples(Variables.filePathTrain2));
        for (String line : ObjectBank.getLineIterator(Variables.bratPath + Variables.fileNameTest2, "utf-8")) {
            // instead of the method in the line below, if you have the individual elements
            // already you can use cdc.makeDatumFromStrings(String[])
            Datum<String, String> d = cdc.makeDatumFromLine(line);
            System.out.println(line + "  ==>  " + cl.classOf(d));
            i++;
           // System.out.println("-----"+i);
        // Total 3 methods
            //Method 1: Word Frequency Method
            //if (cl.classOf(d).equals("leukemia")) {
            //leukemiaCount ++;
            // } else if (cl.classOf(d).equals("breast-cancer")) {
            //breastCancerCount ++;
            //} else if (cl.classOf(d).equals("glioma")) {
            //gliomaCount ++;
            //} else if (cl.classOf(d).equals("pancreatic-cancer")) {
            //pancreaticCancerCount ++;
            //}
            //Method 2: Count Relevant Score Method
            //if (cl.classOf(d).equals("leukemia")) {
            //leukemiaCount += cl.scoresOf(d).getCount("leukemia");
            // } else if (cl.classOf(d).equals("breast-cancer")) {
            //breastCancerCount += cl.scoresOf(d).getCount("breast-cancer");
            //} else if (cl.classOf(d).equals("glioma")) {
            //gliomaCount += cl.scoresOf(d).getCount("glioma");
            //} else if (cl.classOf(d).equals("pancreatic-cancer")) {
            //pancreaticCancerCount += cl.scoresOf(d).getCount("pancreatic-cancer");
            //}
            //Method 3: Count All Scores Method
            //leukemiaCount += cl.scoresOf(d).getCount("leukemia");
            //breastCancerCount += cl.scoresOf(d).getCount("breast-cancer");
            //gliomaCount += cl.scoresOf(d).getCount("glioma");
            //pancreaticCancerCount += cl.scoresOf(d).getCount("pancreatic-cancer");
            //if (cl.classOf(d).equals("leukemia")) {
//if(myClass.contains("Gene-Level"))
            //System.out.println("-----"+i++);
            
            if (myclass[i].contains("Protein-Level")) {
                leukemia[i][0] = cl.scoresOf(d).getCount("leukemia");
                if(leukemia[i][0]!=0||leukemia[i][1]!=0)
               bw.write("leukemia"+"\t"+leukemia[i][0]+"\t"+leukemia[i][1]+"\n");
            } else if (myclass[i].contains("Gene-Level")) {
  
                leukemia[i][1] = cl.scoresOf(d).getCount("leukemia");
                  if(leukemia[i][0]!=0||leukemia[i][1]!=0)
                bw.write("leukemia"+"\t"+leukemia[i][0]+"\t"+leukemia[i][1]+"\n");
            } // } else if (cl.classOf(d).equals("breast-cancer")) {
            if (myclass[i].contains("Protein-Level")) {
                breastCancer[i][0] = cl.scoresOf(d).getCount("breast-cancer");
                  if(breastCancer[i][0]!=0||breastCancer[i][1]!=0)
                bw.write("breastCancer"+"\t"+breastCancer[i][0]+"\t"+breastCancer[i][1]+"\n");
            } else if (myclass[1].contains("Gene-Level")) {
                breastCancer[i][1] = cl.scoresOf(d).getCount("breast-cancer");
                    if(breastCancer[i][0]!=0||breastCancer[i][1]!=0)
                bw.write("breastCancer"+"\t"+breastCancer[i][0]+"\t"+breastCancer[i][1]+"\n");
            } //} else if (cl.classOf(d).equals("glioma")) {
             if (myclass[i].contains("Protein-Level")) {
                glioma[i][0] = cl.scoresOf(d).getCount("giloma");
               if(glioma[i][0]!=0||glioma[i][1]!=0)
                bw.write("glioma"+"\t"+ glioma[i][0]+"\t"+glioma[i][1]+"\n");
            } else if (myclass[i].contains("Gene-Level")) {
                glioma[i][1] = cl.scoresOf(d).getCount("giloma");
                if(glioma[i][0]!=0||glioma[i][1]!=0)
                bw.write("glioma"+"\t"+ glioma[i][0]+"\t"+ glioma[i][1] +"\n");
            } //} else if (cl.classOf(d).equals("pancreatic-cancer")) {
            if (myclass[i].contains("Protein-Level")) {
                pancreaticCancer[i][0] = cl.scoresOf(d).getCount("pancreatic-cancer");
                if(pancreaticCancer[i][0]!=0||pancreaticCancer[i][1]!=0)
                bw.write("pancreaticCancer"+"\t"+pancreaticCancer[i][0]+"\t"+pancreaticCancer[i][1] +"\n");
            } else if (myclass[i].contains("Gene-Level")) {
                pancreaticCancer[i][1] = cl.scoresOf(d).getCount("pancreatic-cancer");
                if(pancreaticCancer[i][0]!=0||pancreaticCancer[i][1]!=0)
                bw.write("pancreaticCancer"+"\t"+pancreaticCancer[i][0]+"\t"+pancreaticCancer[i][1] +"\n");
            }
            //}

        }
        	bw.close();
 
			System.out.println("Done");
 
		} catch (IOException e) {
			e.printStackTrace();
		}

      //  System.out.println(Arrays.deepToString(leukemia));
      //  System.out.println(Arrays.deepToString(breastCancer));
      //  System.out.println(Arrays.deepToString(glioma));
      //  System.out.println(Arrays.deepToString(pancreaticCancer));
        /* float max = Math.max(Math.max(gliomaCount, pancreaticCancerCount), Math.max(leukemiaCount, breastCancerCount));

         if (max == pancreaticCancerCount) {

         JOptionPane.showMessageDialog(null, "PANCREATIC CANCER!!!");
         }
         if (max == gliomaCount) {
         JOptionPane.showMessageDialog(null, "GLIOMA!!!");
         }
         if (max == leukemiaCount) {
         JOptionPane.showMessageDialog(null, "LEUKEMIA!!!");
         }
         if (max == breastCancerCount) {
         JOptionPane.showMessageDialog(null, "BREAST CANCER!!!");
         }

         JOptionPane.showMessageDialog(null, "Scores!!\nPC:" + pancreaticCancerCount + "\nBC:" + breastCancerCount + "\nGlioma:" + gliomaCount + "\nLeukemia:" + leukemiaCount);
         */
    }

    private void makeTestFile() {

        Scanner sc2 = null;

        try {
            sc2 = new Scanner(new File(Variables.bratPath + Variables.fileName + ".ann"));
        } catch (FileNotFoundException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }

        try {

            File file = new File(Variables.bratPath + Variables.fileNameTest2);

            //file.createNewFile();
            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);

            int count = 0;
            boolean newLine = true;
            String temp = "";
            while (sc2.hasNextLine()) {
                Scanner s2 = new Scanner(sc2.nextLine());
                count = 0;
                while (s2.hasNext()) {
                    String s = s2.next();
                    if (s.equals("relatedTo")) {
                        System.out.println(s);
                        newLine = false;
                        break;
                    }

                    if (count == 1 || count >= 4) {
                        if (count == 1) {
                            bw.write("-" + "\t");
                        }
                        if (count >= 4) {
                            bw.write(s + " ");
                        }

                        count++;
                    } else {
                        count++;
                    }
                    // count++;

                }
                if (newLine) {
                    bw.write("\n");
                } else {
                    newLine = true;
                }
            }

            bw.close();
            System.out.println("Done");
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

}
