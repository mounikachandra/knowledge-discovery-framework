/*
 * Copyright (C) 2015 Mastek Ltd
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 *
 * @author Alok Joshi, Mounika G, Rahul Gope, Sri Harsha Moturi Bhushan
 * Kharbikar
 */
package my.demo;

import edu.stanford.nlp.classify.Classifier;
import edu.stanford.nlp.classify.ColumnDataClassifier;
import edu.stanford.nlp.ling.Datum;
import edu.stanford.nlp.objectbank.ObjectBank;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;

import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import jdk.nashorn.internal.runtime.JSType;

public class DemoUI extends javax.swing.JFrame {

    /**
     * Creates new form DemoUI
     */
    public DemoUI() {
        initComponents();

        propLbl.setText(Variables.filePathProp);
        trainLbl.setText(Variables.filePathTrain);
        bratLbl.setText(Variables.bratPath);
        txtLbl.setText(Variables.filePathTxt);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        jPanel1 = new javax.swing.JPanel();
        label2 = new java.awt.Label();
        browseBtnTxt = new javax.swing.JButton();
        ClassifyPanel = new javax.swing.JPanel();
        label3 = new java.awt.Label();
        browseBtnTrain = new javax.swing.JButton();
        btnRun = new javax.swing.JButton();
        label4 = new java.awt.Label();
        browseBtnProp = new javax.swing.JButton();
        label5 = new java.awt.Label();
        browseBtnBrat = new javax.swing.JButton();
        propLbl = new java.awt.Label();
        trainLbl = new java.awt.Label();
        bratLbl = new java.awt.Label();
        btnIdentify = new javax.swing.JButton();
        btnVisualise = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        myLog = new javax.swing.JTextArea();
        txtLbl = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Demo");

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        label1.setText("DEMO");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setAutoscrolls(true);

        label2.setText("Enter a Random Abstract(txt format)");

        browseBtnTxt.setText("Browse");
        browseBtnTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnTxtActionPerformed(evt);
            }
        });

        ClassifyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Classification Details"));
        ClassifyPanel.setAutoscrolls(true);

        label3.setText("Training File");

        browseBtnTrain.setText("Browse");
        browseBtnTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnTrainActionPerformed(evt);
            }
        });

        btnRun.setText("RUN");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        label4.setText("Properties File");

        browseBtnProp.setText("Browse");
        browseBtnProp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnPropActionPerformed(evt);
            }
        });

        label5.setText("Brat Folder");

        browseBtnBrat.setText("Browse");
        browseBtnBrat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBtnBratActionPerformed(evt);
            }
        });

        propLbl.setBackground(new java.awt.Color(166, 213, 216));

        trainLbl.setBackground(new java.awt.Color(166, 213, 216));
        trainLbl.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        bratLbl.setBackground(new java.awt.Color(166, 213, 216));

        btnIdentify.setText("IDENTIFY");
        btnIdentify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIdentifyActionPerformed(evt);
            }
        });

        btnVisualise.setText("VISUALISE");
        btnVisualise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualiseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ClassifyPanelLayout = new javax.swing.GroupLayout(ClassifyPanel);
        ClassifyPanel.setLayout(ClassifyPanelLayout);
        ClassifyPanelLayout.setHorizontalGroup(
            ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClassifyPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClassifyPanelLayout.createSequentialGroup()
                        .addComponent(btnRun, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnIdentify)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnVisualise)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ClassifyPanelLayout.createSequentialGroup()
                        .addGroup(ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bratLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(trainLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(propLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ClassifyPanelLayout.createSequentialGroup()
                        .addGroup(ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(ClassifyPanelLayout.createSequentialGroup()
                                .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(browseBtnBrat))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ClassifyPanelLayout.createSequentialGroup()
                                .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                                .addComponent(browseBtnProp))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ClassifyPanelLayout.createSequentialGroup()
                                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(browseBtnTrain)))
                        .addGap(153, 153, 153))))
        );
        ClassifyPanelLayout.setVerticalGroup(
            ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClassifyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(browseBtnTrain)
                    .addComponent(label3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trainLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseBtnProp))
                .addGap(22, 22, 22)
                .addComponent(propLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClassifyPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ClassifyPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseBtnBrat)))
                .addGap(21, 21, 21)
                .addComponent(bratLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(ClassifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRun)
                    .addComponent(btnIdentify)
                    .addComponent(btnVisualise)))
        );

        label3.getAccessibleContext().setAccessibleName("");

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));
        jScrollPane2.setAutoscrolls(true);

        myLog.setColumns(20);
        myLog.setRows(5);
        jScrollPane2.setViewportView(myLog);

        txtLbl.setBackground(new java.awt.Color(166, 213, 216));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseBtnTxt))
                    .addComponent(ClassifyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(browseBtnTxt))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ClassifyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        label1.getAccessibleContext().setAccessibleName("Demo");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseBtnBratActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnBratActionPerformed

        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        fileChooser.setAcceptAllFileFilterUsed(false);

        int rVal = fileChooser.showOpenDialog(null);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            Variables.bratPath = fileChooser.getSelectedFile().toString() + "/";
            logIt("Setting Brat Directory to :" + Variables.bratPath);
            bratLbl.setText(Variables.bratPath);
        }
    }//GEN-LAST:event_browseBtnBratActionPerformed

    private void browseBtnPropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnPropActionPerformed

        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PROPERTIES FILES", "prop");
        fileChooser.setFileFilter(filter);

        int rVal = fileChooser.showOpenDialog(null);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            Variables.filePathProp = fileChooser.getSelectedFile().toString();
            logIt("Properties File Selected:" + Variables.filePathProp);
            propLbl.setText(Variables.filePathProp);
        }
    }//GEN-LAST:event_browseBtnPropActionPerformed

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed

        //check if input is set
        if (Variables.bratPath == null || Variables.fileName == null || Variables.filePathProp == null || Variables.filePathTrain == null || Variables.filePathTxt == null) {
            JOptionPane.showMessageDialog(null, "ERROR!!!");
        } else {
            runMyClassifier();
        }
    }//GEN-LAST:event_btnRunActionPerformed

    private void browseBtnTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnTrainActionPerformed

        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TRAIN FILES", "train");
        fileChooser.setFileFilter(filter);

        int rVal = fileChooser.showOpenDialog(null);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            Variables.filePathTrain = fileChooser.getSelectedFile().toString();
            logIt("Train File Selected:" + Variables.filePathTrain);
            trainLbl.setText(Variables.filePathTrain);
        }
    }//GEN-LAST:event_browseBtnTrainActionPerformed

    private void browseBtnTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseBtnTxtActionPerformed

        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        fileChooser.setFileFilter(filter);

        int rVal = fileChooser.showOpenDialog(null);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            Variables.filePathTxt = fileChooser.getSelectedFile().toString();
            logIt("Text File Selected:" + Variables.filePathTxt);
            Variables.fileName = fileChooser.getSelectedFile().getName();
            Variables.fileName = Variables.fileName.substring(0, Variables.fileName.indexOf(".txt"));
            logIt("Identified file name=" + Variables.fileName);
            txtLbl.setText(Variables.filePathTxt);
        }

    }//GEN-LAST:event_browseBtnTxtActionPerformed

    private void btnIdentifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIdentifyActionPerformed

        if (!Variables.multiVariate) {
            makeTestFile(); //Create a test file for second level of classification
        } else {
            makeTestFile2();//Create a test file with multivariate data 
        }

        step2Classify();

    }//GEN-LAST:event_btnIdentifyActionPerformed

    private void btnVisualiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualiseActionPerformed
        Visualise v = new Visualise();
        v.setVisible(true);

    }//GEN-LAST:event_btnVisualiseActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DemoUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new DemoUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ClassifyPanel;
    private java.awt.Label bratLbl;
    private javax.swing.JButton browseBtnBrat;
    private javax.swing.JButton browseBtnProp;
    private javax.swing.JButton browseBtnTrain;
    private javax.swing.JButton browseBtnTxt;
    private javax.swing.JButton btnIdentify;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnVisualise;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private javax.swing.JTextArea myLog;
    private java.awt.Label propLbl;
    private java.awt.Label trainLbl;
    private java.awt.Label txtLbl;
    // End of variables declaration//GEN-END:variables

    public void logIt(String s) {

        myLog.setText(myLog.getText() + "\n" + s);
    }

    private void runMyClassifier() {
        //This funtion is used to identify proteins and genes from a given
        //random abstract by using the stanfor classifier

        try {
            int count = 1;
            int position = 0;

            Scanner sc2 = null;

            try {
                sc2 = new Scanner(new File(Variables.filePathTxt));
                logIt("Reading The abstract...");
                // to get start and end indices

            } catch (FileNotFoundException e1) {
                // TODO Auto-generated catch block!!
                JOptionPane.showMessageDialog(null, "ERROR!!!File Not Found!!");
                //e1.printStackTrace();
            }

            File file = new File(Variables.bratPath + Variables.fileName + ".test");

            logIt("Processing The abstract...");

            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);

            while (sc2.hasNext()) {
                String s = sc2.next();
                bw.write("-" + "\t" + s + "\n");
            }

            bw.close();

            file = new File(Variables.bratPath + Variables.fileName + ".ann");
            logIt("Running the Classifier...");

            fw = new FileWriter(file.getAbsoluteFile());
            bw = new BufferedWriter(fw);

            ColumnDataClassifier cdc = new ColumnDataClassifier(Variables.filePathProp);
            Classifier<String, String> cl = cdc.makeClassifier(cdc
                    .readTrainingExamples(Variables.filePathTrain));
            for (String line : ObjectBank.getLineIterator(Variables.bratPath + Variables.fileName
                    + ".test", "utf-8")) {

                Datum<String, String> d = cdc.makeDatumFromLine(line);
                System.out.println(line + "  ==>  " + cl.classOf(d) + "--");
                String myclass = "";
                if (!cl.classOf(d).equals("Others")) {
                    switch (cl.classOf(d)) {
                        case "gene":
                            myclass = "Gene-Level";
                            Variables.geneCount++;
                            break;
                        case "protein":
                            myclass = "Protein-Level";
                            Variables.proteinCount++;
                            break;
                    }
                    //data for visualisation
                    Variables.geneScores.add(cl.scoresOf(d).getCount("gene"));
                    Variables.proteinScores.add(cl.scoresOf(d).getCount("protein"));
                    Variables.keyWords.add(line.substring(line.indexOf("\t") + 1));

                    logIt("Creating Annotations for Brat...");
                    bw.write("T"
                            + (count++)
                            + "\t"
                            + myclass
                            + " "
                            + position
                            + " "
                            + (position + line
                            .substring(line.indexOf("\t") + 1).length())
                            + "\t" + line.substring(line.indexOf("\t") + 1)
                            + "\n");

                } else {
                    Variables.otherCount++;
                }

                position += (line.substring(line.indexOf("\t") + 1).length() + 1);

            }

            bw.close();
            System.out.println(Variables.geneScores);
            //Copying .txt file to brat folder
            File source = new File(Variables.filePathTxt);
            File dest = new File(Variables.bratPath + Variables.fileName + ".txt");

            //copy file conventional way using Stream
            copyFileUsingStream(source, dest);

            logIt("Opening Browser...");

            //Open the annotations in the brat server
            Desktop d = Desktop.getDesktop();
            d.browse(new URI(Variables.bratURL + Variables.fileName));

        } catch (HeadlessException | IOException e) {
            JOptionPane.showMessageDialog(null, "ERROR!!!Some error has occured");

        } catch (URISyntaxException ex) {
            Logger.getLogger(DemoUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private static void copyFileUsingStream(File source, File dest) throws IOException {
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(source);
            os = new FileOutputStream(dest);
            byte[] buffer = new byte[1024];
            int length;
            while ((length = is.read(buffer)) > 0) {
                os.write(buffer, 0, length);
            }
        } finally {
            is.close();
            os.close();
        }
    }

    private void step2Classify() {
        //This function finds out the given set of keywords are responsible for which disease
        Variables.leukemiaCount = 0;
        Variables.gliomaCount = 0;
        Variables.breastCancerCount = 0;
        Variables.pancreaticCancerCount = 0;
        ColumnDataClassifier cdc = new ColumnDataClassifier(Variables.filePathProp2);
        Classifier<String, String> cl;
        if (!Variables.multiVariate) {

            cl = cdc.makeClassifier(cdc.readTrainingExamples(Variables.filePathTrain2));
        } else {
            cl = cdc.makeClassifier(cdc.readTrainingExamples(Variables.filePathTrain2multi));
        }
        double threshold1, threshold2;
        if (!Variables.multiVariate) {
                threshold1 = Variables.thresholdIndividual;
                threshold2=Variables.thresholdOutlier;
            } else {
                threshold1 = Variables.thresholdIndividualmulti;
                threshold2=Variables.thresholdOutliermulti;
            }
        for (String line : ObjectBank.getLineIterator(Variables.bratPath + Variables.fileNameTest2, "utf-8")) {
            /*
             Check every keyword and calculte the score it gives towards every disease.
             The score is considered to be responsible only if it has a score of more than 2
             All such responsible scores are added and at the end the disease with the maximum score value
             is the predicted disease
             */
            Datum<String, String> d = cdc.makeDatumFromLine(line);
            System.out.println(line + "  ==>  " + cl.classOf(d) + "==" + cl.scoresOf(d));
            


            switch (cl.classOf(d)) {
                case "leukemia":
                    if (cl.scoresOf(d).getCount("leukemia") >= threshold1) {
                        Variables.leukemiaCount += cl.scoresOf(d).getCount("leukemia");
                        System.out.println("Adding");
                    }
                    break;
                case "breast-cancer":
                    if (cl.scoresOf(d).getCount("breast-cancer") >= threshold1) {
                        Variables.breastCancerCount += cl.scoresOf(d).getCount("breast-cancer");
                    }
                    break;
                case "glioma":
                    if (cl.scoresOf(d).getCount("glioma") >= threshold1) {
                        Variables.gliomaCount += cl.scoresOf(d).getCount("glioma");
                    }
                    break;
                case "pancreatic-cancer":
                    if (cl.scoresOf(d).getCount("pancreatic-cancer") >= threshold1) {
                        Variables.pancreaticCancerCount += cl.scoresOf(d).getCount("pancreatic-cancer");
                    }
                    break;
            }
        }

        logIt("Calculating Scores for Disease Identification...");
        /*
         The concept of outlier is tested on the basis that it cannot surely
         predict the disease and hence none of the scores go beyond the total 6
         */

        double max = Math.max(Math.max(Variables.gliomaCount, Variables.pancreaticCancerCount), Math.max(Variables.leukemiaCount, Variables.breastCancerCount));
        if (max >= threshold2) {
            if (max == Variables.pancreaticCancerCount) {

                JOptionPane.showMessageDialog(null, "PANCREATIC CANCER!!!");
            }
            if (max == Variables.gliomaCount) {
                JOptionPane.showMessageDialog(null, "GLIOMA!!!");
            }
            if (max == Variables.leukemiaCount) {
                JOptionPane.showMessageDialog(null, "LEUKEMIA!!!");
            }
            if (max == Variables.breastCancerCount) {
                JOptionPane.showMessageDialog(null, "BREAST CANCER!!!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Outlier!!");
        }

        JOptionPane.showMessageDialog(null, "Scores!!\nPC:" + Variables.pancreaticCancerCount + "\nBC:" + Variables.breastCancerCount + "\nGlioma:" + Variables.gliomaCount + "\nLeukemia:" + Variables.leukemiaCount);
        logIt("Finish!!");
    }

    /*Single Variable*/
    private void makeTestFile() {

        logIt("Creating Test file for Disease Classification...");
        Scanner sc2 = null;

        try {
            sc2 = new Scanner(new File(Variables.bratPath + Variables.fileName + ".ann"));
        } catch (FileNotFoundException e1) {

        }

        try {

            File file = new File(Variables.bratPath + Variables.fileNameTest2);

            //file.createNewFile();
            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw;
            bw = new BufferedWriter(fw);

            int count;

            boolean newLine = true;
            String temp;
            temp = "";
            while (sc2.hasNextLine()) {
                Scanner s2 = new Scanner(sc2.nextLine());
                count = 0;
                while (s2.hasNext()) {
                    String s = s2.next();
                    if (s.equals("relatedTo")) {
                        System.out.println(s);
                        newLine = false;
                        break;
                    }

                    if (count == 1 || count >= 4) {
                        if (count == 1) {
                            bw.write("-" + "\t");
                        }
                        if (count >= 4) {
                            bw.write(s + " ");
                        }

                        count++;
                    } else {
                        count++;
                    }
                    // count++;

                }
                if (newLine) {
                    bw.write("\n");
                } else {
                    newLine = true;
                }
            }

            bw.close();
            System.out.println("Done");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "ERROR!!!");
        }

    }

    /*MULTIVARIATE*/
    private static void makeTestFile2() {
        ArrayList<String> listOfGenes = new ArrayList<>();
        ArrayList<String> listOfProteins = new ArrayList<>();
        Scanner sc2 = null;

        try {
            sc2 = new Scanner(new File(Variables.bratPath + Variables.fileName + ".ann"));
        } catch (FileNotFoundException e1) {
            // TODO Auto-generated catch block
            JOptionPane.showMessageDialog(null, "ERROR!!!File Not Found!!");
        }

        try {

            File file = new File(Variables.bratPath + Variables.fileNameTest2);
     // File file = new File(Variables.bratPath + "newdisease.test");

            //file.createNewFile();
            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw;
            bw = new BufferedWriter(fw);

            while (sc2.hasNextLine()) {
                String line = sc2.nextLine();
                String[] split = line.split("\t");
                System.out.println(Arrays.toString(split));
                String[] split2 = split[1].split(" ");
                if (split2[0].equals("Gene-Level")) {
                    listOfGenes.add(split[2]);
                }
                if (split2[0].equals("Protein-Level")) {
                    listOfProteins.add(split[2]);
                }
            }

            for (String listOfGene : listOfGenes) {
                for (String listOfProtein : listOfProteins) {
                    bw.write("-" + "\t" + listOfGene + "\t" + listOfProtein + "\n");
                }
            }
            bw.close();
            System.out.println("Done");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "ERROR!!!");
        }

    }
}
